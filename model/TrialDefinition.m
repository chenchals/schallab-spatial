classdef TrialDefinition
    %TRIALTYPE Summary of this class goes here
    %   Detailed explanation goes here
    
    properties (Constant)
        %pos1
        GO_AND_STOP = 0;
        GO = 1; % 1 GO 2 STOP
        STOP = 2; %
        %pos2
        SSD_STEPS = []; % 0=all,  1-N, [1 2 5] etc
        %pos3
        CORRECT_AND_WRONG = 0;
        CORRECT = 1;
        WRONG   = 2;
        WRONG_BROKE_TARGET = 3;
        %pos4
        LEFT_AND_RIGHT = 0 ;
        RIGHT = 1 ;
        LEFT = 2 ;
        %pos5
        REWARD_ALL = 0 ;
        REWARD_HIGH = 1 ;
        REWARD_LOW = 2;
        REWARD_MEDIUM = 3;
        %pos6
        BLOCK_NUMBERS = []; % 0 = all, 1-N, [1 2 5] etc
        %pos7
        SUBTRIALS_IN_BLOCK = []; % Within Block 0 = All, else [n:m]index into block [n:m]
        %pos8
        RT_RANGE = []; % 0 = all RTs, else [n m] use range inclusive n, m
    end
    properties
        trialType;
        ssd;
        outcome;
        direction;
        expectedReward;
        blockNumbers;
        subtrialsInBlock;
        rtRangeToUse;
        asCellArray;
    end
    
    %CTOR
    methods (Static)
        function obj = getTrialType(trialType,ssd,outcome,direction,expectedReward,blockNumbers,subtrialsInBlock,rtRangeToUse)
            obj = TrialDefinition();
            obj.trialType = trialType;
            obj.ssd = TrialDefinition.zeroIfEmpty(ssd);
            obj.outcome = outcome;
            obj.direction = direction;
            obj.expectedReward = expectedReward;
            obj.blockNumbers = TrialDefinition.zeroIfEmpty(blockNumbers);
            obj.subtrialsInBlock = TrialDefinition.zeroIfEmpty(subtrialsInBlock);
            obj.rtRangeToUse = TrialDefinition.zeroIfEmpty(rtRangeToUse);
            obj.asCellArray = TrialDefinition.asCellArrayOfProperties(obj);
        end
        
        function obj = getAllTrialTypes()
            obj = TrialDefinition.buildAllTrialTypes;
        end
        
        
        function [ obj ] = goRt()
            %GoRt
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_ALL...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = goRtHi()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_HIGH...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = goRtLo()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_LOW...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        
        function [ obj ] = goLt()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_ALL...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = goLtHi()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_HIGH...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = goLtLo()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.GO...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.CORRECT...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_LOW...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        
        function [ obj ] = ncRt()
            %GoRt
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_ALL...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = ncRtHi()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_HIGH...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = ncRtLo()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.RIGHT...
                ,TrialDefinition.REWARD_LOW...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        
        function [ obj ] = ncLt()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_ALL...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = ncLtHi()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_HIGH...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
        
        function [ obj ] = ncLtLo()
            obj=TrialDefinition.getTrialType(...
                TrialDefinition.STOP...
                ,TrialDefinition.SSD_STEPS...
                ,TrialDefinition.WRONG_BROKE_TARGET...
                ,TrialDefinition.LEFT...
                ,TrialDefinition.REWARD_LOW...
                ,TrialDefinition.BLOCK_NUMBERS...
                ,TrialDefinition.SUBTRIALS_IN_BLOCK...
                ,TrialDefinition.RT_RANGE);
        end
    end
    
    methods (Access = public)
        
        function [ out ] = isDirectionRight(obj)
            out = obj.direction == TrialDefinition.RIGHT;
        end
        function [ out ] = isDirectionLeft(obj)
            out = obj.direction == TrialDefinition.LEFT;
            
        end
        function [ out ] = isDirectionAll(obj)
            out= obj.direction == TrialDefinition.LEFT_AND_RIGHT;
        end
        
        function [ out ] = isGo(obj)
            out= obj.trialType == TrialDefinition.GO;
        end
        
        function [ out ] = isStop(obj)
            out= obj.trialType == TrialDefinition.STOP;
        end
        
    end
    
    
    methods (Static, Access = private)
        function [ out ] = zeroIfEmpty(inVar)
            out = inVar;
            if isempty(inVar)
                out = 0;
            end
        end
        
        function [ out ] =  asCellArrayOfProperties(obj)
            out = {
                obj.trialType
                obj.ssd
                obj.outcome
                obj.direction
                obj.expectedReward
                obj.blockNumbers
                obj.subtrialsInBlock
                obj.rtRangeToUse
                }';
        end
        
        
        function [ outStruct ] = buildAllTrialTypes()
            %GoRt
            outStruct.GoRt = TrialDefinition.goRt();
            
            %GoRtHi
            outStruct.GoRtHi=TrialDefinition.goRtHi();
            
            %GoRtLo
            outStruct.GoRtLo=TrialDefinition.goRtLo();
            
            %GoLt
            outStruct.GoLt=TrialDefinition.goLt();
            
            %GoLtHi
            outStruct.GoLtHi = TrialDefinition.goLtHi();
            
            %GoLtLo
            outStruct.GoLtLo=TrialDefinition.goLtLo();
            
            %NcRt
            outStruct.NcRt = TrialDefinition.ncRt();
            
            %NcRtHi
            outStruct.NcRtHi=TrialDefinition.ncRtHi();
            
            %NcRtLo
            outStruct.NcRtLo=TrialDefinition.ncRtLo();
            
            %NcLt
            outStruct.NcLt=TrialDefinition.ncLt();
            
            %NcLtHi
            outStruct.NcLtHi = TrialDefinition.ncLtHi();
            
            %NcLtLo
            outStruct.NcLtLo=TrialDefinition.ncLtLo();
            
            
        end
    end
    
end

